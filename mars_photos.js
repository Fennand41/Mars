import fetch from 'node-fetch';
import fs from 'fs';
import open from 'open';
import readline from 'readline';
import { loadConfig } from './loadConfig.js';

const rovers = ['perseverance', 'curiosity', 'opportunity', 'spirit'];

function promptUser(question) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    return new Promise(resolve => rl.question(question, answer => {
        rl.close();
        resolve(answer.trim());
    }));
}

async function getAvailableCameras(rover, dateType, dateValue, apiKey) {
    const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?${dateType}=${dateValue}&api_key=${apiKey}`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ: ${response.status}`);
        }
        const data = await response.json();
        const photos = data.photos;
        const cameraSet = new Set();
        photos.forEach(photo => {
            cameraSet.add(photo.camera.name);
        });
        return Array.from(cameraSet);
    } catch (error) {
        console.error(`‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–º–µ—Ä: ${error.message}`);
        return [];
    }
}

async function fetchPhotos() {
    const config = await loadConfig('config.json');
    const apiKey = config.api_key;

    // –í–∏–±—ñ—Ä –º–∞—Ä—Å–æ—Ö–æ–¥–∞
    console.log('–î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—Å–æ—Ö–æ–¥–∏:');
    rovers.forEach((rover, index) => {
        console.log(`${index + 1}. ${rover}`);
    });
    let roverIndex = await promptUser('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –º–∞—Ä—Å–æ—Ö–æ–¥–∞: ');
    roverIndex = parseInt(roverIndex, 10);
    if (isNaN(roverIndex) || roverIndex < 1 || roverIndex > rovers.length) {
        console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä –º–∞—Ä—Å–æ—Ö–æ–¥–∞.');
        return;
    }
    const rover = rovers[roverIndex - 1];

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–Ω—ñ—Ñ–µ—Å—Ç—É –º—ñ—Å—ñ—ó
    const manifestUrl = `https://api.nasa.gov/mars-photos/api/v1/manifests/${rover}?api_key=${apiKey}`;
    let manifestData;
    try {
        const manifestResponse = await fetch(manifestUrl);
        if (!manifestResponse.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –º–∞–Ω—ñ—Ñ–µ—Å—Ç—É: ${manifestResponse.status}`);
        }
        const manifestJson = await manifestResponse.json();
        manifestData = manifestJson.photo_manifest;
    } catch (error) {
        console.error(`‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–∞–Ω—ñ—Ñ–µ—Å—Ç—É: ${error.message}`);
        return;
    }

    // –í–∏–≤—ñ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç
    console.log(`\nüìÖ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –º–∞—Ä—Å–æ—Ö–æ–¥–∞ ${rover}:`);
    console.log(`- –ó–µ–º–Ω–∞ –¥–∞—Ç–∞: –≤—ñ–¥ ${manifestData.landing_date} –¥–æ ${manifestData.max_date}`);
    console.log(`- –ú–∞—Ä—Å—ñ–∞–Ω—Å—å–∫—ñ –¥–Ω—ñ (Sol): –≤—ñ–¥ 0 –¥–æ ${manifestData.max_sol}`);

    // –í–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞—Ç–∏
    const dateTypeChoice = await promptUser('\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–∞—Ç–∏ (1 - –ó–µ–º–Ω–∞ –¥–∞—Ç–∞, 2 - Sol): ');
    let dateType = '';
    let dateValue = '';
    if (dateTypeChoice === '1') {
        dateType = 'earth_date';
        dateValue = await promptUser('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD: ');
    } else if (dateTypeChoice === '2') {
        dateType = 'sol';
        dateValue = await promptUser('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä Sol: ');
    } else {
        console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–∞—Ç–∏.');
        return;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞–º–µ—Ä
    const availableCameras = await getAvailableCameras(rover, dateType, dateValue, apiKey);
    if (availableCameras.length === 0) {
        console.log('‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞–º–µ—Ä –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.');
        return;
    }

    // –í–∏–±—ñ—Ä –∫–∞–º–µ—Ä–∏
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞–º–µ—Ä–∏:');
    availableCameras.forEach((cam, index) => {
        console.log(`${index + 1}. ${cam}`);
    });
    const cameraIndex = await promptUser('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞–º–µ—Ä–∏ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤—Å—ñ—Ö –∫–∞–º–µ—Ä): ');
    let cameraParam = '';
    if (cameraIndex) {
        const camIdx = parseInt(cameraIndex, 10);
        if (isNaN(camIdx) || camIdx < 1 || camIdx > availableCameras.length) {
            console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞–º–µ—Ä–∏.');
            return;
        }
        const camera = availableCameras[camIdx - 1];
        cameraParam = `&camera=${camera}`;
    }

    const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?${dateType}=${dateValue}${cameraParam}&api_key=${apiKey}`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ: ${response.status}`);
        }

        const data = await response.json();
        const photos = data.photos;

        if (!photos || photos.length === 0) {
            console.log('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.');
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
        fs.writeFileSync('latest_photos.json', JSON.stringify(photos, null, 2));
        console.log('‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª latest_photos.json');

        // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
        photos.forEach((photo, index) => {
            console.log(`\nüì∑ –§–æ—Ç–æ ${index + 1}`);
            console.log(`üóì –ó–µ–º–Ω–∞ –¥–∞—Ç–∞: ${photo.earth_date}`);
            console.log(`üì∏ –ö–∞–º–µ—Ä–∞: ${photo.camera.full_name}`);
            console.log(`üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${photo.img_src}`);
        });

    } catch (error) {
        console.error(`‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
}

fetchPhotos();
